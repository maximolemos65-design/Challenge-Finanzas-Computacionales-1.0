import streamlit as st
import yfinance as yf
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm, skew, kurtosis
import math
import pandas as pd
from datetime import date, timedelta

# ==========================
# Encabezado
# ==========================
st.title("üìä Calculadora Financiera")
st.caption("UADE ‚Ä¢ Challenge Computacionales")

st.markdown(
    "Esta app calcula estad√≠sticas de retornos, volatilidad anualizada y precios de opciones con **Black-Scholes**. "
    "Carg√° los par√°metros y apret√° **Calcular**."
)

# ==========================
# Inicializamos variables de estado
# ==========================
if "calculado" not in st.session_state:
    st.session_state.calculado = False

# ==========================
# 1. Entradas del usuario
# ==========================
st.write("üí° Para acciones argentinas agregar '.BA' al final del ticker. Ejemplo: 'GGAL.BA'")

ticker = st.text_input("üìå Ingrese el ticker (ej: AAPL o GGAL.BA):", value="AAPL").strip().upper()
start_date = st.date_input("üóìÔ∏è Fecha inicio", value=date.today() - timedelta(days=180))
end_date = st.date_input("üóìÔ∏è Fecha fin", value=date.today())
interval = st.selectbox("‚è±Ô∏è Periodicidad de datos:", ["1d", "1wk", "1mo"], index=0)

r = float(st.number_input("üìâ Tasa libre de riesgo (ej: 0.05 para 5%): ", value=0.05))
K = float(st.number_input("üí∞ Precio strike: ", value=100.0))
meses = int(st.number_input("‚è≥ Tiempo al vencimiento (meses): ", value=6))
T = meses / 12

# ==========================
# 2. Bot√≥n Calcular
# ==========================
if st.button("Calcular"):
    st.session_state.calculado = True

# ==========================
# 3. C√°lculos (solo si el bot√≥n fue presionado)
# ==========================
if st.session_state.calculado:
    # Todo el c√≥digo de c√°lculos y gr√°ficos

    # ==========================
    # 2. Descargar datos
    # ==========================
    data = yf.download(ticker, start=start_date, end=end_date, interval=interval)
    
    # Retornos logar√≠tmicos
    data['Return'] = np.log(data['Close'] / data['Close'].shift(1))
    returns = data['Return'].dropna()
    
    # ==========================
    # 4. Estad√≠sticas b√°sicas
    # ==========================
    mean_return = returns.mean()
    std_return  = returns.std()
    
    st.subheader(f"\nüìä Retornos y distribuci√≥n de {ticker}")
    st.write(f"\nPromedio retorno: {mean_return*100:.2f}%")
    st.write(f"Desv√≠o retorno:   {std_return*100:.2f}%")
    st.write()
    
    
   # ==========================
    # 5. Histograma con campana normal
    # ==========================
    
    st.markdown("### üìà Distribuci√≥n de Retornos con Campana Normal")
    
    # Verificar que existan datos de retornos
    if "returns" in locals() and not returns.empty:
    
        # Crear la figura y los ejes
        fig, ax = plt.subplots(figsize=(8, 5))
    
        # Histograma de retornos (densidad)
        count, bins, _ = ax.hist(returns, bins=50, density=True, edgecolor='black', alpha=0.7, label="Histograma")
    
        # Rango para la curva normal
        x = np.linspace(min(returns), max(returns), 1000)
        pdf = norm.pdf(x, mean_return, std_return)
    
        # Graficar campana normal te√≥rica
        ax.plot(x, pdf, 'r-', linewidth=2, label="Normal te√≥rica")
    
        # L√≠neas de media y desviaciones est√°ndar
        ax.axvline(mean_return, color='blue', linestyle='dashed', linewidth=2, label=f"Media: {mean_return:.4f}")
        ax.axvline(mean_return + std_return, color='green', linestyle='dashed', linewidth=2, label=f"+1œÉ: {mean_return+std_return:.4f}")
        ax.axvline(mean_return - std_return, color='green', linestyle='dashed', linewidth=2, label=f"-1œÉ: {mean_return-std_return:.4f}")
        ax.axvline(mean_return + 2*std_return, color='green', linestyle='dashed', linewidth=2, label=f"+2œÉ: {mean_return+2*std_return:.4f}")
        ax.axvline(mean_return - 2*std_return, color='green', linestyle='dashed', linewidth=2, label=f"-2œÉ: {mean_return-2*std_return:.4f}")
    
        # Est√©tica del gr√°fico
        ax.set_title(f"Distribuci√≥n de Retornos - {ticker}")
        ax.set_xlabel("Retorno logar√≠tmico")
        ax.set_ylabel("Densidad")
        ax.legend()
        ax.grid(alpha=0.3)
    
        # Mostrar en Streamlit
        st.pyplot(fig)
    
    else:
        st.warning("‚ö†Ô∏è No hay datos de retornos disponibles. Calcul√° los retornos primero.")


    # ==========================
    # 6. Asimetr√≠a y curtosis
    # ==========================
    asimetria = skew(returns)
    curtosis_val = kurtosis(returns, fisher=False)  # fisher=True ‚Üí curtosis "exceso" (0 = normal)
    curtosis_total = kurtosis(returns, fisher=True)
    
    st.caption("\nüìä Asimetr√≠a y Curtosis de la serie de retornos")
    st.write(f"Asimetr√≠a: {asimetria:.4f}")
    st.write(f"Curtosis (total): {curtosis_val:.4f}")
    st.write(f"Curtosis (exceso): {curtosis_total:.4f}")
    
    # ==========================
    # 7. Volatilidad hist√≥rica y ajuste por intervalo
    # ==========================
    if interval == "1d":
        factor = 252
        Dt = 1/252
    elif interval == "1wk":
        factor = 52
        Dt = 1/52
    elif interval == "1mo":
        factor = 12
        Dt = 1/12
    else:
        factor = 252
        Dt = 1/252
    
    vol_daily = std_return
    vol_annual = vol_daily * np.sqrt(factor)
    
    st.write(f"\nVolatilidad anualizada: {vol_annual*100:.3f}%")
    
    # ==========================
    # 8. Black-Scholes
    # ==========================
    sigma = float(vol_annual)
    S = float(data['Close'].iloc[-1])  # √öltimo precio spot
    d1 = (math.log(S/K) + (r + 0.5*sigma**2)*T) / (sigma * math.sqrt(T))
    d2 = d1 - sigma * math.sqrt(T)
    Nd1 = norm.cdf(d1)
    Nd2 = norm.cdf(d2)
    
    st.caption(f"\nüìä Black-Scholes")
    st.write(f"d1 = {d1:.4f}")
    st.write(f"d2 = {d2:.4f}")
    st.write(f"Nd1 = {Nd1:.4f}")
    st.write(f"Nd2 = {Nd2:.4f}")
    
    # ==========================
    # 9. Precios de la opci√≥n
    # ==========================
    call_price = S * norm.cdf(d1) - K * math.exp(-r*T) * norm.cdf(d2)
    put_price  = K * math.exp(-r*T) * norm.cdf(-d2) - S * norm.cdf(-d1)
    
    # ==========================
    # 10. Valor intr√≠nseco y extr√≠nseco
    # ==========================
    call_intrinsic = max(S - K, 0)
    put_intrinsic  = max(K - S, 0)
    
    call_extrinsic = call_price - call_intrinsic
    put_extrinsic  = put_price - put_intrinsic
    
    st.write(f"\nüí∞ Precio Call (BS): {call_price:.2f}")
    st.write(f"   - Intr√≠nseco: {call_intrinsic:.2f}")
    st.write(f"   - Extr√≠nseco: {call_extrinsic:.2f}")
    
    st.write(f"\nüí∞ Precio Put  (BS): {put_price:.2f}")
    st.write(f"   - Intr√≠nseco: {put_intrinsic:.2f}")
    st.write(f"   - Extr√≠nseco: {put_extrinsic:.2f}")
    
    """Volatilidad"""
    
    st.write("‚Äî Cantidad de desv√≠os ‚Äî")
    
    # ==========================
    # 2.1 Calcular Z-scores
    # ==========================
    z_scores = (returns - mean_return) / std_return
    
    # Media y desv√≠o de los Z-scores
    mean_z = z_scores.mean()
    std_z  = z_scores.std()
    
    st.write()
    st.write(f"Media z-scores: {mean_z:.6f}")
    st.write(f"Desv√≠o z-scores: {std_z:.6f}")
    
    # ==========================
    # 2.3 Histograma de Z-Scores
    # ==========================
    plt.figure(figsize=(8,5))
    plt.hist(z_scores, bins=40, edgecolor='black', alpha=0.7, density=True, label="Z-Scores observados")
    
    # Curva normal est√°ndar
    x = np.linspace(-4, 4, 200)
    plt.plot(x, norm.pdf(x, 0, 1), 'r-', lw=2, label="N(0,1) te√≥rica")
    
    # L√≠neas de referencia
    plt.axvline(0, color='blue', linestyle='dashed', linewidth=2, label=f"Media=0: {mean_z:.4f}")
    plt.axvline(1, color='green', linestyle='dashed', linewidth=1, label=f"+1œÉ: {mean_z+std_z:.4f}")
    plt.axvline(-1, color='green', linestyle='dashed', linewidth=1, label=f"-1œÉ: {mean_z-std_z:.4f}")
    
    # Texto con valores
    plt.text(2.5, 0.35, f"Œº_ret = {mean_return:.5f}\nœÉ_ret = {std_return:.5f}\nŒº_z = {mean_z:.5f}\nœÉ_z = {std_z:.5f}",
             bbox=dict(facecolor='white', alpha=0.7))
    
    plt.title(f"Distribuci√≥n de Z-Scores - {ticker}")
    plt.xlabel("Z-Score (zt)")
    plt.ylabel("Densidad")
    plt.legend()
    plt.show()
    
    # ==========================
    # 2.4 Asimetr√≠a y curtosis de Z-Scores
    # ==========================
    asimetriaz = skew(z_scores)
    curtosisz_val = kurtosis(z_scores, fisher=False)  # fisher=True ‚Üí curtosis "exceso" (0 = normal)
    
    st.write("\nüìä Asimetr√≠a y Curtosis de la serie de Z-Scores")
    st.write(f"Asimetr√≠a: {asimetria:.4f}")
    st.write(f"Curtosis: {curtosis_val:.4f}")
    
    # ==========================
    # 2.5 Medias m√≥viles
    # ==========================
    
    st.write("\n‚Äî Volatilidad m√≥vil ‚Äî")
    
    # --- Desv√≠os m√≥viles (ventanas) calculados sobre data['Return'] para preservar √≠ndice ---
    std_20 = data['Return'].rolling(window=20).std()    # desv√≠o m√≥vil 20 per√≠odos
    std_250 = data['Return'].rolling(window=250).std()  # desv√≠o m√≥vil 250 per√≠odos
    
    # Opcional: anualizar (descomentar si quer√©s)
    std_20_ann  = std_20 * np.sqrt(factor)
    std_250_ann = std_250 * np.sqrt(factor)
    
    # --- Gr√°fico ---
    plt.figure(figsize=(12,6))
    plt.plot(std_20.index, std_20_ann, '--', label='Std20 (anualizada)', color='orange')
    plt.plot(std_250.index, std_250_ann, '--', label='Std250 (anualizada)', color='red')
    plt.axhline(y=vol_annual, color='green', linestyle='--', linewidth=1.5, label=f'Std constante')
    
    plt.title(f"Evoluci√≥n del desv√≠o est√°ndar m√≥vil de retornos - {ticker}")
    plt.xlabel("Fecha")
    plt.ylabel("Desv√≠o est√°ndar (por periodo)")
    plt.legend()
    plt.grid(alpha=0.3)
    plt.tight_layout()
    plt.show()
    
    # --- Valores recientes (por si quer√©s ver n√∫meros) ---
    last_std20 = std_20.dropna().iloc[-1] if std_20.dropna().size>0 else np.nan
    last_std250 = std_250.dropna().iloc[-1] if std_250.dropna().size>0 else np.nan
    # Si annualiz√°s, mostrar:
    st.write("\nüìä Estad√≠sticas - Volatilidades anualizadas")
    st.write(f"√öltimo Std 20 (anualizado): {(last_std20*np.sqrt(factor)*100):.6f}%")
    st.write(f"√öltimo Std 250 (anualizado): {(last_std250*np.sqrt(factor)*100):.6f}%")
    st.write(f"Volatilidad constante del per√≠odo (anualizada): {(vol_annual*100):.6f}%")
    
    """Value at Risk"""
    
    # ==========================
    # 14. Value at Risk (VaR emp√≠rico) + Conditional VaR con sombreado
    # ==========================
    
    # 1. Preguntar nivel de confianza
    conf = st.number_input(st.text_input("üìå Ingrese el nivel de confianza (ej: 0.95 para 95%): "))
    alpha = 1 - conf
    
    # 2. Calcular percentil emp√≠rico (VaR)
    VaR_empirico = np.percentile(returns, alpha*100)  # percentil en base a la muestra
    mean_emp = returns.mean()
    
    # 3. Filtrar retornos en la cola (<= VaR)
    cola = returns[returns <= VaR_empirico]
    
    # Suma, conteo y CVaR
    suma_cola = cola.sum()
    conteo_cola = cola.count()
    CVaR_empirico = cola.mean()
    
    st.write(f"\nüîπ Nivel de confianza (una cola, izquierda): {conf*100:.1f}%")
    st.write(f"   ‚û§ VaR emp√≠rico ({alpha*100:.1f}%) = {VaR_empirico:.5f}")
    st.write(f"   ‚û§ CVaR emp√≠rico (Expected Shortfall) = {CVaR_empirico:.5f}")
    st.write(f"   ‚û§ Suma retornos cola = {suma_cola:.5f}")
    st.write(f"   ‚û§ Conteo retornos cola = {conteo_cola}")
    
    # 4. Graficar histograma con VaR y sombreado de la cola
    plt.figure(figsize=(10,6))
    
    # Histograma completo
    counts, bins, patches = plt.hist(
        returns,
        bins=50,
        density=True,
        edgecolor='black',
        alpha=0.6,
        label="Distribuci√≥n emp√≠rica"
    )
    
    # Sombrear las barras que est√°n a la izquierda del VaR
    for patch, bin_left in zip(patches, bins[:-1]):
        if bin_left <= VaR_empirico:
            patch.set_facecolor('red')
            patch.set_alpha(0.4)
    
    # L√≠nea en el VaR
    plt.axvline(VaR_empirico, color="red", linestyle="--", linewidth=2, label=f"VaR {conf*100:.1f}%: {VaR_empirico:.4f}")
    
    # L√≠nea en la media
    plt.axvline(mean_emp, color="blue", linestyle="--", linewidth=2, label=f"Media: {mean_emp:.4f}")
    
    plt.title(f"VaR y CVaR emp√≠rico de {ticker} al {conf*100:.1f}% de confianza")
    plt.xlabel("Retornos")
    plt.ylabel("Densidad")
    plt.legend()
    plt.grid(alpha=0.3)
    plt.show()
    
    # 5. Mostrar resultados finales
    st.write(f"\nüìä Resultados VaR y CVaR emp√≠rico")
    st.write(f"Nivel de confianza: {conf*100:.1f}%")
    st.write(f"En el {alpha*100:.2f}% de los casos, suponiendo una distribuci√≥n normal de los retornos y bajo condiciones normales de mercado, {ticker} tendr√° un rendimiento menor o igual a {VaR_empirico*100:.5f}%.")
    st.write(f"¬øQu√© podemos esperar si se rompe el VaR? Para saberlo es √∫til hacer uso del VaR Condicional (CVaR), que es el promedio de los retornos m√°s all√° de esa barrera. Para este caso el CVaR es {CVaR_empirico*100:.5f}%.")
    
    """Simulaci√≥n de Montecarlo"""
    
    # ==========================
    # Gr√°fico combinado: hist√≥rico + Monte Carlo
    # ==========================
    
    plt.figure(figsize=(12,6))
    
    # 1. Gr√°fico hist√≥rico
    plt.plot(data.index, data['Close'], label=f"Precio hist√≥rico {ticker}", color="blue", linewidth=2)
    
    # 2. Determinar frecuencia seg√∫n intervalo elegido
    if interval == "1d":
        freq = "B"
        N = 252
    elif interval == "1wk":
        freq = "W"
        N = 52
    elif interval == "1mo":
        freq = "M"
        N = 12
    else:
        freq = "B"
        N = 252
    
    # 3. Simulaciones Monte Carlo
    n_simulaciones = 500
    simulaciones = np.zeros((N+1, n_simulaciones))   # incluye S0
    S0 = float(data['Close'].iloc[-1])   # ‚úÖ escalar
    mu = mean_return
    dt = Dt   # ya lo definiste seg√∫n intervalo
    
    for j in range(n_simulaciones):
        prices = [S0]
        for t in range(1, N+1):
            z = np.random.normal()
            St = float(prices[-1] * np.exp((mu - 0.5 * sigma**2)*dt + sigma*np.sqrt(dt)*z))  # ‚úÖ float
            prices.append(St)
        simulaciones[:, j] = np.array(prices).flatten()   # ‚úÖ vector 1D
    
        # Fechas futuras (arranca despu√©s del √∫ltimo dato real)
        future_dates = pd.date_range(start=data.index[-1], periods=N+1, freq=freq)[1:]
        plt.plot(future_dates, prices[1:], linewidth=1, alpha=0.2, color="orange")
    
    # 4. L√≠nea promedio de todas las simulaciones
    mean_path = simulaciones.mean(axis=1)[1:]
    plt.plot(future_dates, mean_path, color="black", linewidth=2, label="Media de simulaciones")
    
    # 5. √öltimo precio como referencia
    plt.scatter(data.index[-1], S0, color="black", zorder=5, label=f"√öltimo precio: {S0:.2f}")
    
    # 6. Strike
    plt.axhline(y=K, color="red", linestyle="--", linewidth=1.5, label=f"Strike = {K}")
    
    # 7. Formato
    plt.title(f"Trayectoria hist√≥rica y simulaciones Monte Carlo - {ticker}")
    plt.xlabel("Fecha")
    plt.ylabel("Precio")
    plt.legend()
    plt.grid(alpha=0.3)
    plt.show()
    
    # ==========================
    # 8. Histograma de precios finales
    # ==========================
    final_prices = simulaciones[-1, :]  # √∫ltimos precios de cada simulaci√≥n
    
    plt.figure(figsize=(8,5))
    plt.hist(final_prices, bins=10, edgecolor='black', alpha=0.7)
    
    # L√≠nea en el precio inicial
    plt.axvline(S0, color="blue", linestyle="--", linewidth=2, label=f"Precio inicial: {S0:.2f}")
    
    # L√≠nea en el strike
    plt.axvline(K, color="red", linestyle="--", linewidth=2, label=f"Strike = {K}")
    
    # Estad√≠sticas
    mean_final = np.mean(final_prices)
    std_final  = np.std(final_prices)
    
    st.write()
    plt.axvline(mean_final, color="green", linestyle="--", linewidth=2, label=f"Media final: {mean_final:.2f}")
    plt.title(f"Distribuci√≥n de precios finales - Monte Carlo ({ticker})")
    plt.xlabel("Precio al vencimiento (1 a√±o)")
    plt.ylabel("Frecuencia")
    plt.legend()
    plt.show()
    
    st.write("\nüìä Resultados Monte Carlo")
    st.write(f"Precio inicial: {S0:.2f}")
    st.write(f"Precio medio simulado a 1 a√±o: {mean_final:.2f}")
    st.write(f"Desv√≠o de precios finales: {std_final:.2f}")
   
    # ==========================
    # 1. Preparar datos
    # ==========================
    # returns ya lo ten√©s calculado antes
    # Calcular cambio porcentual en volumen
    
    st.caption("üìäVolumen")
    
    # Verificar que existan los datos
    if "data" in locals() and not data.empty:
    
        # --- 1. Preparar datos ---
        volumen = data["Volume"].squeeze()
        vol_media = volumen.mean()
        vol_ratio = volumen / vol_media if vol_media != 0 else pd.Series(np.nan, index=volumen.index)
    
        df_aux = pd.DataFrame({
            "Return": returns,
            "Vol_Ratio": vol_ratio
        }).dropna()
    
        # --- 2. Estad√≠sticas ---
        vol_desvio = volumen.std()
        vol_max = volumen.max()
        vol_min = volumen.min()
    
        # Mostrar m√©tricas en columnas
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("üìà Promedio Volumen", f"{vol_media/1000000:,.3f}M")
        col2.metric("üìâ Desv√≠o", f"{vol_desvio/1000000:,.3f}M")
        col3.metric("üîù M√°ximo", f"{vol_max/1000000:,.3f}M")
        col4.metric("üîª M√≠nimo", f"{vol_min/1000000:,.3f}M")
    
        # --- 3. Gr√°fico de dispersi√≥n ---
        st.caption("üîπ Dispersi√≥n: Retornos vs Proporci√≥n del Volumen Promedio")
        fig1, ax1 = plt.subplots(figsize=(8, 5))
        ax1.scatter(df_aux["Return"], df_aux["Vol_Ratio"], alpha=0.5, color="purple")
        ax1.set_title(f"Relaci√≥n entre Retornos y Volumen Promedio - {ticker}")
        ax1.set_xlabel("Retornos")
        ax1.set_ylabel("Volumen observado / Promedio")
        ax1.grid(alpha=0.3)
        st.pyplot(fig1)
    
        # --- 4. Gr√°fico de barras del volumen ---
        st.caption("üîπ Volumen de negociaci√≥n a lo largo del tiempo")
        fig2, ax2 = plt.subplots(figsize=(12, 6))
        ax2.bar(volumen.index, volumen.values, width=1, color="purple", alpha=0.7)
        ax2.set_title(f"Volumen de negociaci√≥n - {ticker}")
        ax2.set_xlabel("Fecha")
        ax2.set_ylabel("Volumen")
        ax2.grid(axis="y", alpha=0.5)
        # Ajustar etiquetas de fechas (si hay muchas)
        if len(volumen) > 10:
            ax2.set_xticks(volumen.index[::len(volumen)//10])
            ax2.set_xticklabels(volumen.index[::len(volumen)//10].strftime("%Y-%m-%d"), rotation=45)
        plt.tight_layout()
        st.pyplot(fig2)
    
    else:
        st.warning("‚ö†Ô∏è A√∫n no se cargaron datos. Presion√° *Calcular* primero.")

    
    """Momentum - Variaciones"""
    
    import numpy as np
    import pandas as pd
    
    # Create a new DataFrame for the momentum variations
    momentum_data = pd.DataFrame(index=data.index)
    
    # Paso 1: clasificar retorno actual y agregar a momentum_data
    condiciones = [
        data['Return'] > 0,
        data['Return'] < 0,
        data['Return'] == 0
    ]
    valores = ['Positivo', 'Negativo', 'Sin variaci√≥n']
    momentum_data['Return_class'] = np.select(condiciones, valores, default='Sin variaci√≥n')
    
    # Paso 2: clasificaci√≥n del retorno anterior y agregar a momentum_data
    momentum_data['Return_lag1'] = momentum_data['Return_class'].shift(1)
    momentum_data['Return_lag1'] = momentum_data['Return_lag1'].fillna('Sin dato previo')
    
    # Paso 3: retornos de d√≠as previos y agregar a momentum_data
    momentum_data['Return_lag2'] = momentum_data['Return_class'].shift(2)
    momentum_data['Return_lag2'] = momentum_data['Return_lag2'].fillna('Sin dato previo')
    momentum_data['Return_lag3'] = momentum_data['Return_class'].shift(3)
    momentum_data['Return_lag3'] = momentum_data['Return_lag3'].fillna('Sin dato previo')
    momentum_data['Return_lag4'] = momentum_data['Return_class'].shift(4)
    momentum_data['Return_lag4'] = momentum_data['Return_lag4'].fillna('Sin dato previo')
    
    # ------------------------------------------------------------------------LAG1-----------------------------------------------------------------------------------------------
    
    # Filter momentum_data where 'Return_class' is 'Positivo'
    filtered_momentum_data_positivo = momentum_data[momentum_data['Return_class'] == 'Positivo']
    
    # Count positive and negative values in Return_lag1 for the filtered data (Positivo)
    count_pp = filtered_momentum_data_positivo['Return_lag1'].value_counts().get('Positivo', 0)
    count_pn = filtered_momentum_data_positivo['Return_lag1'].value_counts().get('Negativo', 0)
    count_svarp1 = filtered_momentum_data_positivo['Return_lag1'].value_counts().get('Sin variaci√≥n', 0)
    total_lag1_positivo = count_pp + count_pn + count_svarp1
    prob_pp = count_pp / total_lag1_positivo
    prob_pn = count_pn / total_lag1_positivo
    
    st.write(f"Probabilidad positivo-positivo: {prob_pp*100:.2f}%")
    st.write(f"Probabilidad positivo-negativo: {prob_pn*100:.2f}%")
    
    # Filter momentum_data where 'Return_class' is 'Negativo'
    filtered_momentum_data_negativo = momentum_data[momentum_data['Return_class'] == 'Negativo']
    
    # Count positive and negative values in Return_lag1 for the filtered data (Negativo)
    count_np = filtered_momentum_data_negativo['Return_lag1'].value_counts().get('Positivo', 0)
    count_nn = filtered_momentum_data_negativo['Return_lag1'].value_counts().get('Negativo', 0)
    count_svarn1 = filtered_momentum_data_negativo['Return_lag1'].value_counts().get('Sin variaci√≥n', 0)
    total_lag1_negativo = count_np + count_nn + count_svarn1
    prob_nn = count_nn / total_lag1_negativo
    prob_np = count_np / total_lag1_negativo
    
    st.write(f"Probabilidad negativo-negativo: {prob_nn*100:.2f}%")
    st.write(f"Probabilidad negativo-positivo: {prob_np*100:.2f}%")
    
    # ------------------------------------------------------------------------LAG2-----------------------------------------------------------------------------------------------
    
    # Filter momentum_data where 'Return_class' and 'Return_lag1' are 'Positivo'
    filtered_momentum_data_pp = momentum_data[(momentum_data['Return_class'] == 'Positivo') & (momentum_data['Return_lag1'] == 'Positivo')]
    
    # Count positive and negative values in Return_lag2 for the filtered data (Positivo, Positivo)
    count_ppp = filtered_momentum_data_pp['Return_lag2'].value_counts().get('Positivo', 0)
    count_ppn = filtered_momentum_data_pp['Return_lag2'].value_counts().get('Negativo', 0)
    count_svarpp2 = filtered_momentum_data_pp['Return_lag2'].value_counts().get('Sin variaci√≥n', 0)
    total_lag2_positivo = count_ppp + count_ppn + count_svarpp2
    prob_ppp = count_ppp / total_lag2_positivo
    prob_ppn = count_ppn / total_lag2_positivo
    
    st.write(f"Probabilidad positivo-positivo-positivo: {prob_ppp*100:.2f}%")
    st.write(f"Probabilidad positivo-positivo-negativo: {prob_ppn*100:.2f}%")
    
    # Filter momentum_data where 'Return_class' and 'Return_lag1' are 'Negativo'
    filtered_momentum_data_nn = momentum_data[(momentum_data['Return_class'] == 'Negativo') & (momentum_data['Return_lag1'] == 'Negativo')]
    
    # Count positive and negative values in Return_lag1 for the filtered data (Negativo)
    count_nnp = filtered_momentum_data_nn['Return_lag2'].value_counts().get('Positivo', 0)
    count_nnn = filtered_momentum_data_nn['Return_lag2'].value_counts().get('Negativo', 0)
    count_svarnn2 = filtered_momentum_data_nn['Return_lag2'].value_counts().get('Sin variaci√≥n', 0)
    total_lag2_negativo = count_nnp + count_nnn + count_svarnn2
    prob_nnp = count_nnp / total_lag2_negativo
    prob_nnn = count_nnn / total_lag2_negativo
    
    st.write(f"Probabilidad negativo-negativo-positivo: {prob_nnp*100:.2f}%")
    st.write(f"Probabilidad negativo-negativo-negativo: {prob_nnn*100:.2f}%")
    
    # ------------------------------------------------------------------------LAG3-----------------------------------------------------------------------------------------------
    
    # Filter momentum_data where 'Return_class' and 'Return_lag1' are 'Positivo'
    filtered_momentum_data_ppp = momentum_data[(momentum_data['Return_class'] == 'Positivo') & (momentum_data['Return_lag1'] == 'Positivo') & (momentum_data['Return_lag2'] == 'Positivo')]
    
    # Count positive and negative values in Return_lag2 for the filtered data (Positivo, Positivo)
    count_pppp = filtered_momentum_data_ppp['Return_lag3'].value_counts().get('Positivo', 0)
    count_pppn = filtered_momentum_data_ppp['Return_lag3'].value_counts().get('Negativo', 0)
    count_svarpp3 = filtered_momentum_data_ppp['Return_lag3'].value_counts().get('Sin variaci√≥n', 0)
    total_lag3_positivo = count_pppp + count_pppn + count_svarpp3
    prob_pppp = count_pppp / total_lag3_positivo
    prob_pppn = count_pppn / total_lag3_positivo
    
    st.write(f"Probabilidad positivo-positivo-positivo-positivo: {prob_pppp*100:.2f}%")
    st.write(f"Probabilidad positivo-positivo-positivo-negativo: {prob_pppn*100:.2f}%")
    
    # Filter momentum_data where 'Return_class' and 'Return_lag1' are 'Negativo'
    filtered_momentum_data_nnn = momentum_data[(momentum_data['Return_class'] == 'Negativo') & (momentum_data['Return_lag1'] == 'Negativo') & (momentum_data['Return_lag2'] == 'Negativo')]
    
    # Count positive and negative values in Return_lag1 for the filtered data (Negativo)
    count_nnnp = filtered_momentum_data_nnn['Return_lag3'].value_counts().get('Positivo', 0)
    count_nnnn = filtered_momentum_data_nnn['Return_lag3'].value_counts().get('Negativo', 0)
    count_svarnn3 = filtered_momentum_data_nnn['Return_lag3'].value_counts().get('Sin variaci√≥n', 0)
    total_lag3_negativo = count_nnnp + count_nnnn + count_svarnn3
    prob_nnnp = count_nnnp / total_lag3_negativo
    prob_nnnn = count_nnnn / total_lag3_negativo
    
    st.write(f"Probabilidad negativo-negativo-negativo-positivo: {prob_nnnp*100:.2f}%")
    st.write(f"Probabilidad negativo-negativo-negativo-negativo: {prob_nnnn*100:.2f}%")
    
    # ------------------------------------------------------------------------LAG4-----------------------------------------------------------------------------------------------
    
    # Filter momentum_data where 'Return_class' and 'Return_lag1' are 'Positivo'
    filtered_momentum_data_pppp = momentum_data[(momentum_data['Return_class'] == 'Positivo') & (momentum_data['Return_lag1'] == 'Positivo') & (momentum_data['Return_lag2'] == 'Positivo') & (momentum_data['Return_lag3'] == 'Positivo')]
    
    # Count positive and negative values in Return_lag2 for the filtered data (Positivo, Positivo)
    count_ppppp = filtered_momentum_data_pppp['Return_lag4'].value_counts().get('Positivo', 0)
    count_ppppn = filtered_momentum_data_pppp['Return_lag4'].value_counts().get('Negativo', 0)
    count_svarppp3 = filtered_momentum_data_pppp['Return_lag4'].value_counts().get('Sin variaci√≥n', 0)
    total_lag4_positivo = count_ppppp + count_ppppn + count_svarppp3
    prob_ppppp = count_ppppp / total_lag4_positivo
    prob_ppppn = count_ppppn / total_lag4_positivo
    
    st.write(f"Probabilidad positivo-positivo-positivo-positivo-positivo: {prob_ppppp*100:.2f}%")
    st.write(f"Probabilidad positivo-positivo-positivo-positivo-negativo: {prob_ppppn*100:.2f}%")
    
    # Filter momentum_data where 'Return_class' and 'Return_lag1' are 'Negativo'
    filtered_momentum_data_nnnn = momentum_data[(momentum_data['Return_class'] == 'Negativo') & (momentum_data['Return_lag1'] == 'Negativo') & (momentum_data['Return_lag2'] == 'Negativo') & (momentum_data['Return_lag3'] == 'Negativo')]
    
    # Count positive and negative values in Return_lag1 for the filtered data (Negativo)
    count_nnnnp = filtered_momentum_data_nn['Return_lag4'].value_counts().get('Positivo', 0)
    count_nnnnn = filtered_momentum_data_nn['Return_lag4'].value_counts().get('Negativo', 0)
    count_svarnnn3 = filtered_momentum_data_nn['Return_lag4'].value_counts().get('Sin variaci√≥n', 0)
    total_lag4_negativo = count_nnnnp + count_nnnnn + count_svarnnn3
    prob_nnnnp = count_nnnnp / total_lag4_negativo
    prob_nnnnn = count_nnnnn / total_lag4_negativo
    
    st.write(f"Probabilidad negativo-negativo-negativo-negativo-positivo: {prob_nnnnp*100:.2f}%")
    st.write(f"Probabilidad negativo-negativo-negativo-negativo-negativo: {prob_nnnnn*100:.2f}%")
    
        # --- Selector de Estrategias ---
    st.subheader("üîé Selector de Estrategias con Opciones")
    
    # ==========================
    # 1. Crear DataFrame
    # ==========================
    df_estrategias = pd.DataFrame({
        "Objetivo": [
            "Cobertura","Acompa√±ar tendencia","Volatilidad",
            "Cobertura","Acompa√±ar tendencia","Volatilidad",
            "Cobertura","Acompa√±ar tendencia","Volatilidad",
            "Cobertura","Acompa√±ar tendencia","Volatilidad",
            "Cobertura","Acompa√±ar tendencia","Volatilidad",
            "Cobertura","Acompa√±ar tendencia","Volatilidad"
        ],
        "Tendencia": [
            "Alcista","Alcista","Alcista",
            "Bajista","Bajista","Bajista",
            "Lateral","Lateral","Lateral",
            "Alcista","Alcista","Alcista",
            "Bajista","Bajista","Bajista",
            "Lateral","Lateral","Lateral"
        ],
        "Volatilidad": [
            "Alta","Alta","Alta",
            "Alta","Alta","Alta",
            "Alta","Alta","Alta",
            "Baja","Baja","Baja",
            "Baja","Baja","Baja",
            "Baja","Baja","Baja"
        ],
        "Estrategia": [
            "Compra CALL",
            "Bull spread con calls",
            "Cono comprado",
            "Compra PUT",
            "Bear spread con puts",
            "Cuna comprada",
            "Collar",
            "Iron condor vendido",
            "Iron condor vendido",
            "Venta PUT",
            "Ratio call spread",
            "Mariposa vendida",
            "Venta CALL",
            "Venta sint√©tico",
            "Cuna vendida",
            "Venta CALL, compra tasa",
            "Ratio put spread",
            "Mariposa comprada"
        ]
    })

    # ==========================
    # 2. Entradas del usuario
    # ==========================
    st.write("Seleccione las condiciones de mercado y su objetivo:")
    
    obj = st.selectbox("üéØ Objetivo:", df_estrategias["Objetivo"].unique())
    tend = st.selectbox("üìà Tendencia:", df_estrategias["Tendencia"].unique())
    vol = st.selectbox("üå™Ô∏è Volatilidad:", df_estrategias["Volatilidad"].unique())

    # ==========================
    # 3. Bot√≥n y resultado
    # ==========================
    if st.button("Buscar Estrategia"):
        resultado = df_estrategias[
            (df_estrategias["Objetivo"].str.lower() == obj.lower()) &
            (df_estrategias["Tendencia"].str.lower() == tend.lower()) &
            (df_estrategias["Volatilidad"].str.lower() == vol.lower())
        ]

        if not resultado.empty:
            recommended_strategy = resultado["Estrategia"].values[0]
            st.success(f"‚úÖ Estrategia recomendada: **{recommended_strategy}**")

            # --- Estrategia espec√≠fica: Compra CALL ---
            if recommended_strategy == "Compra CALL":
                st.subheader("üìò Estrategia: Compra de CALL")

                st.write(
                    "Comprar un **call (opci√≥n de compra)** te da el **derecho, pero no la obligaci√≥n**, "
                    "de comprar el activo subyacente a un precio determinado (strike) hasta la fecha de vencimiento."
                )

                # ==========================
                # Black-Scholes Call
                # ==========================
                K = S * 1.02  # Strike del call (ligeramente OTM)

                def black_scholes_call(S, K, T, r, sigma):
                    """Calcula el precio de un call europeo con Black-Scholes"""
                    d1 = (math.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * math.sqrt(T))
                    d2 = d1 - sigma * math.sqrt(T)
                    call_price = S * norm.cdf(d1) - K * math.exp(-r * T) * norm.cdf(d2)
                    return call_price

                # ==========================
                # C√°lculo prima
                # ==========================
                prima = black_scholes_call(S, K, T, r, sigma)

                # ==========================
                # Payoff al vencimiento
                # ==========================
                S_range = np.linspace(S * 0.7, S * 1.3, 100)
                payoff_call = np.maximum(S_range - K, 0) - prima  # beneficio neto

                # Punto de equilibrio
                breakeven = K + prima

                # ==========================
                # Ejemplo y descripci√≥n
                # ==========================
                st.markdown(
                    f"""
                    **Ejemplo pr√°ctico**
                    
                    Compra de un call sobre **{ticker}** con base **{K:.2f}**, vencimiento en **{T*12:.0f} meses**,  
                    y una prima de **${prima:.2f}** tendr√≠a el siguiente resultado al vencimiento:
                    """
                )

                # ==========================
                # Gr√°fico de payoff
                # ==========================
                plt.figure(figsize=(10, 6))
                plt.plot(S_range, payoff_call, label="Payoff Call", color="blue", linewidth=2)

                # L√≠neas de referencia
                plt.axhline(0, color="black", linestyle="--", linewidth=1)
                plt.axvline(K, color="red", linestyle="--", linewidth=1, label=f"Strike = {K:.2f}")
                plt.axvline(S, color="green", linestyle="--", linewidth=1, label=f"S actual = {S:.2f}")
                plt.axvline(breakeven, color="orange", linestyle="--", linewidth=1.5, label=f"Breakeven = {breakeven:.2f}")

                # Est√©tica
                plt.title("Payoff de un Call Europeo al Vencimiento")
                plt.xlabel("Precio del subyacente al vencimiento")
                plt.ylabel("Beneficio / P√©rdida")
                plt.legend()
                plt.grid(alpha=0.3)

                st.pyplot(plt)
                plt.close()

                # ==========================
                # Informaci√≥n resumen
                # ==========================
                st.markdown("### üìä Resumen de la Estrategia")
                st.write(f"**Prima del call:** ${prima:.2f}")
                st.write(f"**Costo total:** ${prima:.2f}")
                st.write(f"**P√©rdida m√°xima:** ${prima:.2f} (si S < {K:.2f})")
                st.write("**Ganancia m√°xima:** Ilimitada üöÄ")
                st.write(f"**Breakeven:** {breakeven:.2f}  ‚Üí  variaci√≥n necesaria: {(breakeven/S - 1)*100:.2f}%")

                st.success("üí° Una compra de CALL es ideal para escenarios con expectativa **alcista** y volatilidad **moderada o creciente**.")
        else:
            st.warning("‚ö†Ô∏è No se encontr√≥ una estrategia que cumpla esas condiciones.")



    
